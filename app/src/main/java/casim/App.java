/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package casim;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import casim.controller.AutomatonController;
import casim.controller.AutomatonControllerImpl;
import casim.model.langtonsant.Ant;
import casim.model.langtonsant.CellState;
import casim.model.langtonsant.Direction;
import casim.model.langtonsant.LangtonsAnt;
import casim.model.langtonsant.LangtonsAntCell;
import casim.ui.components.grid.CanvasGridBuilderImpl;
import casim.ui.components.grid.CanvasGridImpl;
import casim.ui.components.page.PageContainer;
import casim.ui.utils.StateColorMapper;
import casim.ui.view.AutomatonView;
import casim.utils.Colors;
import casim.utils.coordinate.Coordinates2D;
import casim.utils.coordinate.CoordinatesUtil;
import casim.utils.grid.Grid2DImpl;
import casim.utils.range.Ranges;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;

/**
 * Main project class.
 */
public class App extends Application {

    final static int ROWS = 100;
    final static int COLS = 100;
    final static int CELL_SIZE = 10;

    private CanvasGridImpl getGrid() {
        final var grid = new CanvasGridBuilderImpl().build(ROWS, COLS, CELL_SIZE);
        return (CanvasGridImpl)grid;
    }

    private AutomatonView<CellState> getView(final Stage stage, final AutomatonController<CellState> controller, final CanvasGridImpl grid, final StateColorMapper<CellState> mapper) {
        return new AutomatonView<>(stage, controller, grid, mapper);
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public void start(final Stage primaryStage) throws Exception {
        final var state = new Grid2DImpl<CellState>(ROWS, COLS, () -> CellState.OFF);
        final var ants = new ArrayList<Ant>();
        for (int i = 0; i < 10; i++) {
            final var rand = new Random();
            ants.add(new Ant(Direction.values()[rand.nextInt(Direction.values().length)], CoordinatesUtil.random(ROWS, COLS)));
        }
        final var automaton = new LangtonsAnt(state, ants);
        final var controller = new AutomatonControllerImpl<>(automaton);
        final var view = this.getView(primaryStage, controller, this.getGrid(), s -> {
            switch (s) {
                case ON:
                    return Colors.WHITE;
                case OFF:
                    return Colors.BLACK;
                default:
                    throw new IllegalArgumentException("Invalid state.");
            }
        });

        final var root = new PageContainer();
        root.addPage(view);
        final var scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * Entry point.
     * 
     * @param args command line args.
     */
    public static void main(final String[] args) {
        launch(args);
    }
}
