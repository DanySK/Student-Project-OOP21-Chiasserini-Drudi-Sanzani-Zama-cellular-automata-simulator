/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package casim;

import casim.controller.automaton.AutomatonControllerImpl;
import casim.model.bryansbrain.BryansBrainCellState;
import casim.ui.components.grid.CanvasGridBuilderImpl;
import casim.ui.components.grid.CanvasGridImpl;
import casim.ui.components.page.PageContainer;
import casim.ui.utils.StateColorMapperFactory;
import casim.ui.view.ConcurrentAutomatonViewController;
import casim.utils.automaton.AutomatonFactoryImpl;
import casim.utils.automaton.config.WrappingConfig;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import java.awt.GraphicsEnvironment;
import java.io.IOException;

/**
 * Main project class.
 */
public class App extends Application {

    final static int ROWS = 250;
    final static int COLS = 250;
    final static int DEPTH = 100;

    private CanvasGridImpl getGrid() {
        final var grid = new CanvasGridBuilderImpl().build(ROWS, COLS);
        return (CanvasGridImpl)grid;
    }

    private void startBryansBrainFXML(final Stage primaryStage) throws IOException {
        final var automaton = new AutomatonFactoryImpl().getBryansBrainRandom(new WrappingConfig(ROWS, COLS, true));
        final var controller = new AutomatonControllerImpl<>(automaton);
        final var root = new PageContainer(primaryStage);
        final var loader = new FXMLLoader(getClass().getResource("/automatonView.fxml"));
        final var viewController = new ConcurrentAutomatonViewController<BryansBrainCellState>(
            root, controller, this.getGrid(), StateColorMapperFactory.getBryansBrainStateColorMapper());
        loader.setController(viewController);
        final var view = (VBox) loader.load();

        final var graphics = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        final var width = graphics.getDisplayMode().getWidth() / 2;
        final var height = graphics.getDisplayMode().getHeight() / 2;

        primaryStage.setWidth(width);
        primaryStage.setHeight(height);

        root.addPage(view);
        final var scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * Entry point.
     * 
     * @param args command line args.
     */
    public static void main(final String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        this.startBryansBrainFXML(primaryStage);
    }
}
